#load/store and similar format instructions, works:
ldi r5, x10#this is a comment
ldi r2, 10 #all numbers are hex
ld r3, x00 #number is relative to pointer address (default is 1000)
st r3, x00 #same logic
andi r1, 0x00 #immediate and
cmpa r1, 0x11  #compare and
cmp r1,,,, 0xff #comapre, as many commas as you like
out r1, 0xff #relative to address 3000 (probably)
in r1, 0xff 
 
#does not work:
ld r5, x1000#no errors, won't compile in vhdl code (probably)
ld, r5, x10 #will raise an error

#poi:
poi r1 #r1 is now the pointer

#empty
nop
halt
rti

#branch

br xf0 #always branch
brd x11 #don't branch
bz x11 #branch equal, beq works too
bnz xff #branch not equal, bneq works as well
blu xf0 #branch less than unsigned, bc works too
bgeu xff #branch greater than or equal unsigned, bnc works
bleu xf1 #branh less than or equal unsigned
bgu xff #branch greater than unsigned
blt x00 #branch less than
bge x11 #branch greater than or euqal
ble 0xff #branch less than or equal 
bgt 0x01 #branch greater than


org x1000 #next instruction starts from address 1000 hex

#jump, relative to register, r0 is wired to 0
jmp r0, x10

#shifts, immediate included
shl r1, r2, r3
shli r1, r2, x0 #3 bits only
#other isntructions are shr, shri, ror, rori, sar, sari

#logic instructions
implies r1, r2, r3 #others are xor, and, or

#arithetmtic instrucions

add r1, r2, r3 #addc, sub, subc
